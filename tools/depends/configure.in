AC_PREREQ(2.59)
AC_INIT([android-depends], [2.00], [http://trac.xbmc.org])
:${CFLAGS=""}
AC_CONFIG_AUX_DIR([aux])
AC_CONFIG_FILES([config.site config.site.native Makefile Makefile.include Toolchain.cmake])
AC_CANONICAL_HOST
AC_ARG_VAR(XBMC_ANDROID_NDK, path to android ndk)
AC_ARG_VAR(XBMC_ANDROID_SDK, path to android sdk)
AC_ARG_VAR(XBMC_ANDROID_TARBALLS, path where tarballs will be saved)
use_ndk=$XBMC_ANDROID_NDK
use_sdk_path=$XBMC_ANDROID_SDK
use_tarballs=$XBMC_ANDROID_TARBALLS

AC_ARG_WITH([toolchain],
  [AS_HELP_STRING([--with-toolchain],
  [specify path to android toolchain])],
  [use_toolchain=$withval],)

AC_ARG_WITH([tarballs],
  [AS_HELP_STRING([--with-tarballs],
  [path where tarballs will be saved])],
  [use_tarballs=$withval])

AC_ARG_WITH([cpu],
  [AS_HELP_STRING([--with-cpu],
  [optional. specify target cpu. guessed if not specified])],
  [use_cpu=$withval],use_cpu=auto)

AC_ARG_WITH([ndk],
  [AS_HELP_STRING([--with-ndk],
  [specify path to ndk (required for android only)])],
  [use_ndk=$withval])

AC_ARG_WITH([sdk-path],
  [AS_HELP_STRING([--with-sdk-path],
  [specify path to sdk (required for android only)])],
  [use_sdk_path=$withval])

AC_ARG_WITH([sdk],
  [AS_HELP_STRING([--with-sdk],
  [spcify sdk platform version (optional for android). default is android-10])],
  [use_sdk=$withval])

AC_CHECK_PROG(HAVE_UNZIP,unzip,"yes","no",)
if test "x$HAVE_UNZIP" = "xno" ; then
  AC_MSG_ERROR("Missing program: unzip")
fi

AC_CHECK_PROG(HAVE_ZIP,zip,"yes","no",)
if test "x$HAVE_ZIP" = "xno" ; then
  AC_MSG_ERROR("Missing program: zip")
fi

AC_PATH_PROG(CURL,curl,"no")
if test "x$CURL" = "xno" ; then
  AC_MSG_ERROR("Missing program: curl")
fi

AC_PATH_PROG(TAR,tar,"no")
if test "x$TAR" = "xno" ; then
  AC_MSG_ERROR("Missing program: tar")
fi

use_host=$host_alias

passed_cflags="$CFLAGS"
passed_ldflags="$LDFLAGS"
passed_cxxflags="$CXXFLAGS"
platform_cc=gcc
platform_cpp=cpp
platform_cxx=g++
case $host in
  arm*-*linux-android*)
    if test "x$use_cpu" = "xauto"; then
      use_cpu="armeabi-v7a"
    fi
    if test "x$use_cpu" = "xarmeabi-v7a"; then
      platform_cflags+=" -march=armv7-a -mtune=cortex-a9 -mfloat-abi=softfp -mfpu=neon "
    fi
    use_sdk="${use_sdk:-android-10}"
    platform_cflags+=" -DANDROID -Os -fexceptions"
    platform_cxxflags="$platform_cflags -frtti"
    platform_ldflags=" -L$prefix/$use_host/lib/$use_sdk"
    platform_includes=" -I$prefix/$use_host/include/$use_sdk"
    platform_os="android"
  ;;     
  i*86*-android-linux-gnu*)
    if test "x$use_cpu" = "xauto"; then
      use_cpu=$host_cpu
    fi
    use_sdk="${use_sdk:-android-10}"
    platform_cflags="-DANDROID -Os -fexceptions"
    platform_cxxflags="$platform_cflags -frtti"
    platform_ldflags="-L$prefix/$use_host/lib/$use_sdk"
    platform_includes="-I$prefix/$use_host/include/$use_sdk"
    platform_os="android"
  ;;
  arm*-*-linux-gnu*)
    if test "x$use_cpu" = "xauto"; then
      use_cpu=$host_cpu
    fi
    platform_cflags+="-Os -fPIC -DPIC"
    platform_cxxflags="$platform_cflags"
    platform_ldflags="-Wl,-rpath-link=$prefix/$use_host/lib"
    platform_os="linux"
  ;;
  *i686*-linux-gnu*)
    use_cpu=$host_cpu
    platform_os="linux"
  ;;
  x86_64*-linux-gnu*)
    use_cpu=$host_cpu
    platform_cflags="-fPIC -DPIC"
    platform_cxxflags="$platform_cflags"
    platform_os="linux"
  ;;
  *darwin*)
    use_xcodepath="/Applications/Xcode.app/Contents/Developer"
    if test "x$prefix" = "xNONE"; then
      prefix=/Users/Shared/xbmc-depends
    fi
    use_tarballs="${use_tarballs:-$prefix/tarballs}"
    AC_PATH_PROG([use_xcodebuild],[xcodebuild],,[/Applications/Xcode.app/Contents/Developer])
    if [[ ! -f "$use_xcodebuild" ]]; then
      AC_PATH_PROG([use_xcodebuild],[xcodebuild])
      use_xcodepath="/Developer"
    fi
    AC_MSG_RESULT(found xcodebuild at $use_xcodebuild)
    use_xcode=[`$use_xcodebuild -version | grep Xcode | awk '{ print $2}'`]

    case $use_xcode in
      3.*.*)
        platform_cc=gcc-4.2
        platform_cpp=cpp-4.2
        platform_cxx=g++-4.2
        ;;
      *)
        platform_cc=llvm-gcc-4.2
        platform_cpp="llvm-gcc-4.2 -E"
        platform_cxx=llvm-g++-4.2
        ;;
    esac
    case $host in
      *86*-apple-darwin)
        found_sdk_version=[`$use_xcodebuild -showsdks | grep macosx | sort |  tail -n 1 | grep -oE 'macosx[0-9.0-9]+' | cut -c 7-$NF`]
        use_sdk="${use_sdk:-$found_sdk_version}"
        use_toolchain="${use_toolchain:-$use_xcodepath/usr}"
        if test "$use_cpu" = "armv7"; then
          AC_MSG_ERROR(error in configure of --with-arch=$use_cpu)
        fi
        case $use_sdk in
          10.5);;
          10.6);;
          10.7);;
          10.8);;
          *)
            AC_MSG_ERROR(error in configure of --with-sdk=$use_sdk)
        esac
        sdk_name=macosx$use_sdk
        use_sdk_path=[`$use_xcodebuild -version -sdk $sdk_name | grep ^Path | awk '{ print $2}'`]
        platform_os="osx"
        platform_min_version=macosx-version-min=10.6
        platform_includes=" -isysroot $use_sdk_path "
        case $host in
          x86_64-apple-darwin*)
            if test "x$use_cpu" = "xauto"; then
              use_cpu=x86_64
            fi
            platform_cflags="-arch $use_cpu -no_compact_linkedit -std=gnu99 -no-cpp-precomp -m$platform_min_version"
            platform_ldflags=" -isysroot $use_sdk_path -arch $use_cpu -L$use_sdk_path/usr/lib -L$use_sdk_path/usr/lib/system -no_compact_linkedit -m$platform_min_version "
            platform_cxxflags="$platform_cflags"
          ;;
          i*86-apple-darwin*)
            if test "x$use_cpu" = "xauto"; then
              use_cpu=i386
            fi
            platform_cflags="-arch $use_cpu -no_compact_linkedit -std=gnu99 -no-cpp-precomp -m$platform_min_version"
            platform_ldflags=" -isysroot $use_sdk_path -arch $use_cpu -L$use_sdk_path/usr/lib -L$use_sdk_path/usr/lib/system -no_compact_linkedit -m$platform_min_version "
            platform_cxxflags="$platform_cflags"
          ;;
          *)
            AC_MSG_ERROR(error in configure of --with-arch=$use_cpu)
        esac
      ;;

      arm-apple-darwin*)
        if test "x$use_cpu" = "xauto"; then
          use_cpu=armv7
        fi
        if test "$use_cpu" != "armv7"; then
          AC_MSG_ERROR(error in configure of --with-arch=$use_cpu)
        fi
        platform_min_version="iphoneos-version-min=4.2"
        found_sdk_version=[`$use_xcodebuild -showsdks | grep iphoneos | sort | tail -n 1 | awk '{ print $2}'`]
        use_sdk="${use_sdk:-$found_sdk_version}"
        use_toolchain="${use_toolchain:-$use_xcodepath/Platforms/iPhoneOS.platform/Developer/usr}"
        case $use_sdk in
          4.*);;
          5.*);;
          6.*);;
            *)
              AC_MSG_ERROR(error in configure of --with-sdk=$use_sdk)
            ;;
        esac
        sdk_name=iphoneos$use_sdk
        use_sdk_path=[`$use_xcodebuild -version -sdk $sdk_name | grep ^Path | awk '{ print $2}'`]
        platform_os="ios"
        platform_includes+=" -isysroot $use_sdk_path "
        platform_ldflags=" -isysroot $use_sdk_path -arch $use_cpu -L$use_sdk_path/usr/lib/system -L$use_sdk_path/usr/lib -m$platform_min_version "
        platform_cflags="-arch $use_cpu -mcpu=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=softfp -pipe -Wno-trigraphs -fpascal-strings -O3 -Wreturn-type -Wunused-variable -fmessage-length=0 -gdwarf-2 -std=gnu99 -no-cpp-precomp -m$platform_min_version"
        platform_cxxflags="$platform_cflags"
      ;;
    esac
  ;;
  *)
    AC_MSG_ERROR(unsupported host ($use_host))
esac

platform_cflags+=" $passed_cflags"
platform_cxxflags+=" $passed_cxxflags"
platform_ldflags+=" $passed_ldflags"
platform_ldflags+=" $LIBS"

AC_PATH_TOOL([RANLIB], [ranlib],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([LD], [ld],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([AR], [ar],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([READELF], [readelf],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([STRIP], [strip],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([AS], [as],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([NM], [nm],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([OBJDUMP], [objdump],, [$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([CC],[$platform_cc],,[$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([CPP],[$platform_cpp],,[$use_toolchain:$use_toolchain/bin:$PATH])
AC_PATH_TOOL([CXX],[$platform_cxx],,[$use_toolchain:$use_toolchain/bin:$PATH])

AC_CHECK_LIB([z],   [main], has_zlib=1, AC_MSG_WARN("No zlib support in toolchain. Will build libz."); has_zlib=0)
AC_SEARCH_LIBS([iconv_open],iconv, link_iconv=$ac_cv_search_iconv_open, AC_MSG_WARN("No iconv support in toolchain. Will build libiconv."); need_libiconv=1)

if test "$link_iconv" = "none required"; then
  link_iconv=
fi

if test -z $use_tarballs; then
  AC_MSG_ERROR([No tarballs path defined]);
fi

if test "$platform_os" == "android"; then
  if test -z $use_ndk; then
    AC_MSG_ERROR("NDK path is required for android")
  fi

  if test -z $use_sdk_path; then
    AC_MSG_ERROR("SDK path is required for android")
  fi

  if [ ! test -f $use_sdk_path/tools/zipalign ]; then
    AC_MSG_ERROR(verify sdk path)
  fi

  if [ ! test -f $use_ndk/sources/android/native_app_glue/android_native_app_glue.h ]; then
    AC_MSG_ERROR(verify ndk path)
  fi
fi

# Some dumb checks to see if paths might be correct.
if [ ! `mkdir -p $prefix/$use_host/include` ]; then
  AC_MSG_ERROR(unable to create $prefix/$use_host/include. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$use_host/lib` ]; then
  AC_MSG_ERROR(unable to create $prefix/$use_host/lib. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$use_host/share` ]; then
  AC_MSG_ERROR(unable to create $prefix/$use_host/share. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$build_cpu-$build_os-native/include` ]; then
  AC_MSG_ERROR(unable to create $prefix/$build_cpu-$build_os-native/include. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$build_cpu-$build_os-native/lib` ]; then
  AC_MSG_ERROR(unable to create $prefix/$build_cpu-$build_os-native/lib. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$build_cpu-$build_os-native/share` ]; then
  AC_MSG_ERROR(unable to create $prefix/$build_cpu-$build_os-native/share. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $prefix/$build_cpu-$build_os-native/bin` ]; then
  AC_MSG_ERROR(unable to create $prefix/$build_cpu-$build_os-native/share. verify that the path and permissions are correct.)
fi

if [ ! `mkdir -p $use_tarballs` ]; then
  AC_MSG_ERROR(unable to create tarballs dir. verify that the path and permissions are correct.)
fi

if test "$platform_os" == "android"; then
  echo

  if [ ! `mkdir -p $prefix/$use_host/include/$use_sdk` ]; then
    AC_MSG_ERROR(unable to create $prefix/$use_host/include/$use_sdk. verify that the path and permissions are correct.)
  fi

  if [ ! `mkdir -p $prefix/$use_host/lib/$use_sdk` ]; then
    AC_MSG_ERROR(unable to create $prefix/$use_host/lib/$use_sdk. verify that the path and permissions are correct.)
  fi
fi

if test "$platform_os" == "android"; then
echo -e
  AC_SUBST(use_sdk_path)
  AC_SUBST(use_ndk)
  AC_SUBST(use_sdk)
fi

AC_SUBST(use_host)
AC_SUBST(use_cpu)
AC_SUBST(use_toolchain)
AC_SUBST(use_tarballs)
AC_SUBST(platform_cflags)
AC_SUBST(platform_cxxflags)
AC_SUBST(platform_ldflags)
AC_SUBST(platform_includes)
AC_SUBST(platform_os)
AC_SUBST(has_zlib)
AC_SUBST(link_iconv)
AC_SUBST(need_libiconv)

AC_OUTPUT
echo -e "toolchain:\t $use_toolchain"
echo -e "cpu:\t\t $use_cpu"
echo -e "host:\t\t $use_host"
if test "$platform_os" == "android"; then
  echo -e "sdk-platform:\t $use_sdk"
fi

if test "$platform_os" == "ios"; then
  simulator_sdk_path=[`$use_xcodebuild -version -sdk iphonesimulator$use_sdk | grep ^Path | awk '{ print $2}'`]
  cp -vf $simulator_sdk_path/usr/include/crt_externs.h $prefix/$use_host/include
fi

cp -vf config.site $prefix/$use_host/share
cp -vf Toolchain.cmake $prefix/$use_host/share
cp -vf config.site.native $prefix/$build_cpu-$build_os-native/share/config.site
